<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FramesTabTitle" xml:space="preserve">
    <value>Rahmen</value>
  </data>
  <data name="FramesTabTooltip" xml:space="preserve">
    <value>Rahmen</value>
  </data>
  <data name="GraphCollapseAriaLabel" xml:space="preserve">
    <value>Drücken Sie die EINGABETASTE, um das Diagramm zu reduzieren.</value>
  </data>
  <data name="GraphExpandAriaLabel" xml:space="preserve">
    <value>Drücken Sie die EINGABETASTE, um das Diagramm zu erweitern.</value>
  </data>
  <data name="HotElementsTabTitle" xml:space="preserve">
    <value>Hot-Elemente</value>
  </data>
  <data name="HotElementsTabTooltip" xml:space="preserve">
    <value>Nach Vorlage gruppiert</value>
  </data>
  <data name="Layout_Category" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="LayoutLegendTooltip" xml:space="preserve">
    <value>Prozentsatz der im Layout verstrichenen Zeit</value>
  </data>
  <data name="LogicalTreeTabTitle" xml:space="preserve">
    <value>Logische Struktur</value>
  </data>
  <data name="LogicalTreeTooltip" xml:space="preserve">
    <value>Logische Struktur</value>
  </data>
  <data name="MillisecondsAbbreviation" xml:space="preserve">
    <value>ms</value>
  </data>
  <data name="MillisecondsLabel" xml:space="preserve">
    <value>Millisekunden</value>
  </data>
  <data name="MinutesAbbreviation" xml:space="preserve">
    <value>min</value>
  </data>
  <data name="MinutesLabel" xml:space="preserve">
    <value>Minuten</value>
  </data>
  <data name="ParsingTabTitle" xml:space="preserve">
    <value>Parsen</value>
  </data>
  <data name="ParsingTabTooltip" xml:space="preserve">
    <value>Parsen</value>
  </data>
  <data name="Parsing_Category" xml:space="preserve">
    <value>Parsen</value>
  </data>
  <data name="ParsingLegendTooltip" xml:space="preserve">
    <value>Prozentsatz der beim Analysieren eines XAML-Dokuments verstrichenen Zeit</value>
  </data>
  <data name="RulerAriaLabel" xml:space="preserve">
    <value>Das Lineal hat einen Mindestwert von {0} und einen Höchstwert von {1}.</value>
  </data>
  <data name="RulerLeftSliderAriaLabel" xml:space="preserve">
    <value>Linker Schieberegler</value>
  </data>
  <data name="RulerLifecycleMarkLabel" xml:space="preserve">
    <value>Markierung des App-Lebenszyklus</value>
  </data>
  <data name="RulerRightSliderAriaLabel" xml:space="preserve">
    <value>Rechter Schieberegler</value>
  </data>
  <data name="RulerSliderAriaValueText" xml:space="preserve">
    <value>Aktueller Wert ist {0}. Minimalwert ist {1}. Maximalwert ist {2}.</value>
  </data>
  <data name="RulerTitle" xml:space="preserve">
    <value>Diagnosesitzung</value>
  </data>
  <data name="RulerUserMarkLabel" xml:space="preserve">
    <value>Benutzermarkierung</value>
  </data>
  <data name="Ruler_LifeCycleEvents" xml:space="preserve">
    <value>Markierung des App-Lebenszyklus</value>
  </data>
  <data name="Ruler_UserMarks" xml:space="preserve">
    <value>Benutzermarkierung</value>
  </data>
  <data name="RulerMarkTooltipLabel" xml:space="preserve"> <!-- Appended to label text in diagnostics hub ruler control, e.g. "Activation Start"xxxxxx -->
    <value> um {0}</value>
  </data>
  <data name="RulerMarkLabel" xml:space="preserve">
    <value>Eine Linealmarkierung, die auf das Auftreten der folgenden Ereignisse hinweist: {0}</value>
    <comment>{0} is replaced with the tooltip content of the ruler mark(s)</comment>
  </data>
  <data name="SecondsAbbreviation" xml:space="preserve">
    <value>s</value>
  </data>
  <data name="SecondsLabel" xml:space="preserve">
    <value>Sekunden</value>
  </data>
  <data name="SummaryTabTitle" xml:space="preserve">
    <value>Zusammenfassung</value>
  </data>
  <data name="SummaryTabTooltip" xml:space="preserve">
    <value>Zusammenfassung</value>
  </data>
  <data name="UiThreadActivityAriaLabel" xml:space="preserve">
    <value>Ein Balkendiagramm, das die Auslastung des UI-Threads durch die Anwendung darstellt. Drücken Sie die Nach-Links- und Nach-Rechts-Pfeiltasten, um zu navigieren.</value>
  </data>
  <data name="UiThreadActivityBarAriaLabel" xml:space="preserve">
    <value>{0} hat {1} % der Zeit im UI-Thread genutzt</value>
  </data>
  <data name="UiThreadActivityChartTitle" xml:space="preserve">
    <value>Auslastung des UI-Threads (%)</value>
  </data>
  <data name="XamlOther_Category" xml:space="preserve">
    <value>Andere XAML</value>
  </data>
  <data name="XamlOtherLegendTooltip" xml:space="preserve">
    <value>Prozentsatz der in anderen XAML-Diensten verstrichenen Zeit</value>
  </data>
  <data name="XamlProfilerDetailsViewTitle" xml:space="preserve">
    <value>XAML-UI-Reaktionsfähigkeit</value>
  </data>
  <data name="XamlProfilerToolDescription" xml:space="preserve">
    <value>Untersuchen, wo in Ihrer Anwendung Zeit verbracht wird</value>
  </data>
  <data name="XamlProfilerToolName" xml:space="preserve">
    <value>XAML-UI-Reaktionsfähigkeit</value>
  </data>
  <data name="SelectAnEventDescription" xml:space="preserve">
    <value>Eintrag in der Zeitskala auswählen, um die jeweiligen Detailinformationen anzuzeigen</value>
  </data>
  <data name="DescriptionLabel" xml:space="preserve">
    <value>Beschreibung</value>
  </data>
  <data name="DurationExclusiveLabel" xml:space="preserve">
    <value>Dauer (exklusiv)</value>
  </data>
  <data name="DurationInclusiveLabel" xml:space="preserve">
    <value>Dauer (inklusiv)</value>
  </data>
  <data name="ElementsExclusiveLabel" xml:space="preserve">
    <value>UI-Elemente (exklusiv)</value>
  </data>
  <data name="ElementsInclusiveLabel" xml:space="preserve">
    <value>UI-Elemente (inklusiv)</value>
  </data>
  <data name="EndTimeLabel" xml:space="preserve">
    <value>Endzeit</value>
  </data>
  <data name="EventsTimelineAriaLabel" xml:space="preserve">
    <value>Ein verschiebbares Gantt-Diagramm mit der Sequenz der Ereignisse, die innerhalb der aktuellen Zeitauswahl aufgetreten sind. Drücken Sie die Nach-oben- und Nach-unten-Pfeiltasten, um zu navigieren.</value>
  </data>
  <data name="StartTimeLabel" xml:space="preserve">
    <value>Startzeit</value>
  </data>
  <data name="XAMLParsingViewEventHeaderLabel" xml:space="preserve">
    <value>Dateiname</value>
  </data>
  <data name="AnalyzeDataStatus" xml:space="preserve">
    <value>Die gesammelten Daten werden analysiert</value>
  </data>
  <data name="ElementCountLabel" xml:space="preserve">
    <value>Anzahl der Elemente</value>
  </data>
  <data name="ElementNameLabel" xml:space="preserve">
    <value>Elementname</value>
  </data>
  <data name="HotElementsViewEventHeaderLabel" xml:space="preserve">
    <value>Typ</value>
  </data>
  <data name="TemplateNameLabel" xml:space="preserve">
    <value>Vorlagenname</value>
  </data>
  <data name="DWM_Category" xml:space="preserve">
    <value>Kompositionsthread</value>
  </data>
  <data name="FrameRateGraphGraphTitle" xml:space="preserve">
    <value>Visueller Durchsatz</value>
  </data>
  <data name="FrameRateUnit" xml:space="preserve">
    <value>FPS</value>
  </data>
  <data name="DefaultTemplateNameLabel" xml:space="preserve">
    <value>default</value>
  </data>
  <data name="InlineTemplateNameLabel" xml:space="preserve">
    <value>Inline</value>
  </data>
  <data name="UI_Category" xml:space="preserve">
    <value>UI-Thread</value>
  </data>
  <data name="HotElementXAMLFileNameLabel" xml:space="preserve">
    <value>Dateiname</value>
  </data>
  <data name="AppCode_Category" xml:space="preserve">
    <value>App-Code</value>
  </data>
  <data name="AppCodeLegendTooltip" xml:space="preserve">
    <value>Prozentsatz der in AppCode verstrichenen Zeit</value>
  </data>
</root>